#pragma once
#include "Code.hpp"
#include <cstddef>
#include <vector>
#include <map>

typedef uint32_t InsType;

/*
 * address resolution:
 * 	use offset to map address
 *	the final address is begin_addr+offset
 *	offset is an signed int_32
 */
/*
 * the address of a label is resolved immediately, as the beginning address and the
 * address of current instruction is resolved
 */

// although named 'stack'
// it is not a true stack
class CodeStack {
	public:
		CodeStack() {addr=0;}
		// set start address (note: not current address)
		// the address of the current code = begin_addr+offset, where begin_addr is normally set to zero
		void setAddress(uint32_t);
		/* @description: insert code, alone with its label, or without label
		 * @return: false if the code format is incorrect and set fail() to true, what() to
		 *          the error description.
		 * @note: error state will be overwritten by each insertion.
		 *          true if no error ocurrs
		 */
		bool insert(const std::string& label, const Code& code);
		// insert code without label
		bool insert(const Code& code);
		// insert label into current code
		bool insertLabel(const std::string& label);
		// generate code:
		// this includes:
		// 	remap the label to address
		//	translate the readabkle format(struct code) into binary format(typedef InsType)
		bool generate(void);
	// result related funtions
	public:
		// return the last binary code generated by Generate();
		const std::vector<InsType> get(void) const {return binary;}
		// clear input(inserted code) output(generated code) and error state
		void clear() {clrerr(); binary.clear(); origin.clear();}
		// the number of the last generated codes
		size_t size(void) const {return binary.size();}
		InsType operator[](size_t index) const {return binary[index];}
	public:
		bool fail() {return err==true;}
		std::string& what(void) const {return des;}
		setErr(const std::string& desc) {err=true; des=desc;}
		void clrerr(void) {des=""; err=false;}
	private:
		bool validate(const Code& code);
	private:
		std::vector<InsType> binary;
		std::vector<Code> origin;
		std::mpa<std::string, int> labels;
		uint32_t addr;
	private:
		bool err;
		std::string des;
};

